import os
import uuid

# Tạo một UUID làm tên thư mục
BASE_DIR = "/tmp/code_manager"
unique_id = str(uuid.uuid4())
user_dir = os.path.join(BASE_DIR, unique_id)

# Đảm bảo thư mục UUID tồn tại
os.makedirs(user_dir, exist_ok=True)
print(f"Directory created: {user_dir}")

# Đường dẫn file
code_path = os.path.join(user_dir, "example.cpp")

# Tạo file và ghi nội dung
try:
    with open(code_path, "w") as code_file:
        code_file.write("int main() { return 0; }")
    print(f"File created: {code_path}")
except Exception as e:
    print(f"Error creating file: {e}")

# Xác minh nội dung thư mục
print(f"Contents of {user_dir}: {os.listdir(user_dir)}")

---------------------

import os
import uuid

BASE_DIR = "/tmp/code_manager"

logging.basicConfig(level=logging.INFO)
os.makedirs(BASE_DIR, exist_ok=True)
logging.info(f"Base directory created: {BASE_DIR}")
unique_id = str(uuid.uuid4())
user_dir = os.path.join(BASE_DIR, unique_id)
os.makedirs(user_dir, exist_ok=True)
code_filename = "main.cpp"
code_path = os.path.join(user_dir, code_filename)
code = "#include<iostream>\nint main() { std::cout << \"Hello World\"; return 0; }"
with open(code_path, "w") as code_file:
    code_file.write(code)


----
      try:
        result = subprocess.run(
          ["cat", code_path],
          stdout=subprocess.PIPE,
          stderr=subprocess.PIPE,
          text=True
        )
        if result.returncode == 0:
          logging.info(f"Content of {code_path}: \n{result.stdout}")
        else:
          logging.error(f"Failed to read {code_path} using cat: {result.stderr}")
      except Exception as e:
        logging.error(f"Error while running cat on {code_path}: {e}")
    logging.info(f"Code file saved: {code_path}")


----
docker exec -it  <container_name_or_id> bash
docker logs -f <container_name_or_id>

curl -X POST http://localhost:8080/api/code-manager/execute -H "Content-Type: application/json" -d '{
      "processor": "cpp",
      "code": "#include<iostream>\nint main() { std::cout << \"Hello World\"; return 0; }",
      "input_data": ""
    }'

curl -X POST http://localhost:8080/api/code-manager/execute -H "Content-Type: application/json" -d '{
  "processor": "cpp",
  "code": "#include<iostream>\nint main() { int n; std::cin >> n; std::cout << n << \"\\n\"; return 0; }",
  "input_data": "2"
}'

curl -X POST http://localhost:8080/api/code-manager/execute -H "Content-Type: application/json" -d '{
  "processor": "python",
  "code": "print(\"Hello\")",
  "input_data": ""
}'

ERROR:

InvalidProcessorConfigurationException:

curl -X POST http://localhost:8080/api/code-manager/execute -H "Content-Type: application/json" -d '{
  "processor": "unsupported_language",
  "code": "#include<iostream>\nint main() { std::cout << \"Hello World\"; return 0; }",
  "input_data": ""
}'

FileNotFoundException

curl -X POST http://localhost:8080/api/code-manager/execute -H "Content-Type: application/json" -d '{
  "processor": "cpp",
  "code": "",
  "input_data": ""
}'

SegmentationFaultException

curl -X POST http://localhost:8080/api/code-manager/execute -H "Content-Type: application/json" -d '{
  "processor": "cpp",
  "code": "#include<iostream>\nint main() { int* p = nullptr; *p = 10; return 0; }",
  "input_data": ""
}'

CompilationErrorException

curl -X POST http://localhost:8080/api/code-manager/execute -H "Content-Type: application/json" -d '{
  "processor": "cpp",
  "code": "#include<iostream>\nint main() { std::cout << Hello World; return 0; }",
  "input_data": ""
}'

TimeLimitExceededException

curl -X POST http://localhost:8080/api/code-manager/execute -H "Content-Type: application/json" -d '{
  "processor": "cpp",
  "code": "#include<iostream>\nint main() { while(true) {}; return 0; }",
  "input_data": ""
}'

MemoryLimitExceededException

curl -X POST http://localhost:8080/api/code-manager/execute -H "Content-Type: application/json" -d '{
  "processor": "cpp",
  "code": "#include<iostream>\nint main() { int* p = new int[100000000]; return 0; }",
  "input_data": ""
}'

RuntimeErrorException

curl -X POST http://localhost:8080/api/code-manager/execute -H "Content-Type: application/json" -d '{
  "processor": "cpp",
  "code": "#include<iostream>\nint main() { int a = 10 / 0; return 0; }",
  "input_data": ""
}'

MAX - MIN 

curl -X POST http://localhost:8080/api/code-manager/testcase \
-H "Content-Type: application/json" \
-d '{
  "processor": "cpp",
  "code": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <limits>\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::cin.ignore();\n    std::string line;\n    std::getline(std::cin, line);\n    std::istringstream iss(line);\n    std::vector<int> arr;\n    int num;\n    while (iss >> num) {\n        arr.push_back(num);\n    }\n    if (arr.size() != n) {\n        std::cout << \"Error: Number of elements does not match n\\n\";\n        return 1;\n    }\n    int max_val = std::numeric_limits<int>::min();\n    int min_val = std::numeric_limits<int>::max();\n    for (int i : arr) {\n        if (i > max_val) max_val = i;\n        if (i < min_val) min_val = i;\n    }\n    std::cout << max_val << \" \" << min_val << std::endl;\n    return 0;\n}",
  "input_data": ""
}'

curl -X POST http://localhost:8080/api/code-manager/testcase \
-H "Content-Type: application/json" \
-d '{
  "processor": "cpp",
  "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int arr[n];\n    for (int i = 0; i < n; ++i) {\n        cin >> arr[i];\n    }\n    int max_val = arr[0];\n    int min_val = arr[0];\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] > max_val) max_val = arr[i];\n        if (arr[i] < min_val) min_val = arr[i];\n    }\n    cout << max_val << \" \" << min_val << endl;\n    return 0;\n}",
  "input_data": ""
}'

curl -X POST http://localhost:8080/api/code-manager/testcase \
-H "Content-Type: application/json" \
-d '{
  "processor": "python",
  "code": "n = int(input())\narr = list(map(int, input().split()))\nmax_val = max(arr)\nmin_val = min(arr)\nprint(max_val, min_val)",
  "input_data": ""
}'

ERROR:

curl -X POST http://localhost:8080/api/code-manager/testcase \
-H "Content-Type: application/json" \
-d '{
  "processor": "cpp",
  "code": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int arr[2];\n    for (int i = 0; i < n; ++i) {\n        cin >> arr[i];\n    }\n    int max_val = arr[0];\n    int min_val = arr[0];\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] > max_val) max_val = arr[i];\n        if (arr[i] < min_val) min_val = arr[i];\n    }\n    cout << max_val << \" \" << min_val << endl;\n    return 0;\n}",
  "input_data": ""
}'

rm -rf */
rm -f *
