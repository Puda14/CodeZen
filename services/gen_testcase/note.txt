OLLAMA_HOST=0.0.0.0 ollama serve
curl -fsSL https://ollama.com/install.sh | sh

ollama pull qwen1.5-code-7b-chat

 curl -N -X POST http://localhost:8080/api/gen/testcases -H "Content-Type: application/json" -d '{"problem_description": "# Problem Template\n\n## Description\n\nGiven an array of integers, find the length of its longest increasing subsequence (LIS).\n\nA subsequence is a sequence derived from the array by deleting some or no elements without changing the order of the remaining elements. The LIS must be **strictly increasing**, meaning each subsequent element is greater than the previous one.\n\nFor example:\n- In the array `[10, 9, 2, 5, 3, 7, 101, 18]`, one possible LIS is `[2, 3, 7, 18]` with length 4.\n- In the array `[1, 3, 2, 4, 5]`, LIS could be `[1, 2, 4, 5]` with length 4.\n\n## Input\n\n```plaintext\nn\na_1 a_2 a_3 ... a_n\n```\n\n- The first line contains an integer `n` — the number of elements in the array.\n- The second line contains `n` integers `a_1, a_2, ..., a_n` — the elements of the array.\n\n## Output\n\n```plaintext\nAn integer representing the length of the longest increasing subsequence.\n```\n\n### Constraints\n\n```math\n1 \\leq n \\leq 1000\n-10^9 \\leq a_i \\leq 10^9\n```", "solution_code": "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    arr = list(map(int, data[1:]))\n\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    print(dp[n-1])  \nif __name__ == \"__main__\":\n    main()"}'

curl -N -X POST http://localhost:8080/api/gen/testcases \
  -H "Content-Type: application/json" \
  -H "x-access-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODBiYmQ2NmIyY2FhMWU5NDdjMjFkZjYiLCJlbWFpbCI6InVzZXIxQGV4YW1wbGUuY29tIiwiaWF0IjoxNzQ3Mzg4MTE4LCJleHAiOjE3NDc0NzQ1MTh9._zFj3H-TANcyRJXbBHSVasVcP6T6wCbR0pziIW6wcmM" \
  -d '{
    "problem_description": "# Problem Template\n\n## Description\n\nGiven an array of integers, find the length of its longest increasing subsequence (LIS).\n\nA subsequence is a sequence derived from the array by deleting some or no elements without changing the order of the remaining elements. The LIS must be **strictly increasing**, meaning each subsequent element is greater than the previous one.\n\nFor example:\n- In the array `[10, 9, 2, 5, 3, 7, 101, 18]`, one possible LIS is `[2, 3, 7, 18]` with length 4.\n- In the array `[1, 3, 2, 4, 5]`, LIS could be `[1, 2, 4, 5]` with length 4.\n\n## Input\n\n```plaintext\nn\na_1 a_2 a_3 ... a_n\n```\n\n- The first line contains an integer `n` — the number of elements in the array.\n- The second line contains `n` integers `a_1, a_2, ..., a_n` — the elements of the array.\n\n## Output\n\n```plaintext\nAn integer representing the length of the longest increasing subsequence.\n```\n\n### Constraints\n\n```math\n1 \\leq n \\leq 1000\n-10^9 \\leq a_i \\leq 10^9\n```",
    "solution_code": "import sys\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    arr = list(map(int, data[1:]))\n\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    print(dp[n-1])  \nif __name__ == \"__main__\":\n    main()",
    "processor":"python3"
  }'
