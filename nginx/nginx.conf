events {}

http {
    # Log access requests
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Server configuration
    server {
        listen 80;
        server_name localhost;

        # CORS Configuration
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, apikey' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header Content-Type application/json always;

        # Default endpoint
        location / {
            return 200 'API Gateway is running';
            add_header Content-Type text/plain;
        }

        # Route for Auth Service (S0)
        location /api/ {
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, apikey' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header Content-Type application/json always;
                return 204;
            }

            proxy_pass http://auth-service:9000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route for Core Service (S1)
        location /api/core/ {
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, x-access-token, apikey' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header Content-Type application/json always;
                return 204;
            }

            proxy_pass http://core-service:8001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route for Code Manager Service (S2)
        location /api/code-manager/ {
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, apikey' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header Content-Type application/json always;
                return 204;
            }

            proxy_pass http://code-manager-service:8002/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_read_timeout 120s;
            proxy_send_timeout 120s;
        }

        # Route for Chatbot Service (S3)
        location /api/chatbot/ {
            proxy_pass http://chatbot-service:8003/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
