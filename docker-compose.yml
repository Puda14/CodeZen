version: "3.8"

services:
  nginx:
    build: ./nginx
    ports:
      - "8080:80"
    depends_on:
      - frontend
      - core-service
      - code-manager-service
      - gen-testcase-service
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_HEARTBEAT: 3600
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:latest
    container_name: mongo
    command:
      ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/etc/mongo-keyfile"]
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./mongo-keyfile:/etc/mongo-keyfile
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - app-network

  mongo-init:
    image: mongo:latest
    container_name: mongo-init
    restart: "no"
    depends_on:
      - mongo
    command: >
      bash -c "
        echo 'Waiting for MongoDB connection...'
        sleep 25 # Thời gian chờ ban đầu để mongo khởi động và cho phép kết nối

        echo 'Attempting to initiate Replica Set...'
        mongosh --host mongo:27017 -u root -p password --authenticationDatabase admin --eval '
          printjson(rs.initiate({
            _id: \"rs0\",
            members: [{ _id: 0, host: \"mongo:27017\" }]
          }));
        ' || echo 'rs.initiate may have failed or run previously.'

        echo 'Waiting 10 seconds for node to potentially become primary...'
        sleep 10 # Thêm thời gian chờ SAU KHI initiate

        echo 'Attempting to create user...'
        mongosh --host mongo:27017 -u root -p password --authenticationDatabase admin --eval '
          printjson(db.getSiblingDB(\"core-database\").createUser({
            user: \"core\",
            pwd: \"12345678\",
            roles: [{ role: \"readWrite\", db: \"core-database\" }]
          }));
        ' || echo 'User creation may have failed.'

        echo 'MongoDB initialization commands attempted.'
      "
    networks:
      - app-network

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    privileged: true

  auth-service:
    build: ./services/auth
    ports:
      - "9000:9000"
    volumes:
      - ./services/auth:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network
    environment:
      - JWT_SECRET=your-secret-key
      - MONGO_URL=mongodb://core:12345678@mongo:27017/core-database?authSource=core-database&replicaSet=rs0
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASS=${MAIL_PASS}
      - APP_BASE_URL=${APP_BASE_URL}

  core-service:
    build: ./services/core
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    volumes:
      - ./services/core:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network
    environment:
      - JWT_SECRET=your-secret-key
      - MONGO_URL=mongodb://core:12345678@mongo:27017/core-database?authSource=core-database&replicaSet=rs0
      - REDIS_URL=redis://redis:6379
      - INTERNAL_API_KEY=your-very-secret-internal-key

  code-manager-service:
    build: ./services/code_manager
    volumes:
      - ./services/code_manager:/app
    ports:
      - "8002:8002"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - MONGO_URL=mongodb://core:12345678@mongo:27017/core-database?authSource=core-database&replicaSet=rs0
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key
      - INTERNAL_API_KEY=your-very-secret-internal-key

  code-execute-worker-service:
    build: ./services/code_execute_worker
    volumes:
      - ./services/code_execute_worker:/app
      - /tmp/code_manager:/tmp/code_manager:rw
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8012:8012"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - INTERNAL_API_KEY=your-very-secret-internal-key

  ollama-proxy:
    image: alpine/socat
    command: TCP-LISTEN:11434,fork,reuseaddr TCP:172.17.0.1:11434
    networks:
      - app-network

  gen-testcase-service:
    build: ./services/gen_testcase
    volumes:
      - ./services/gen_testcase:/app
    ports:
      - "8003:8003"
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - OLLAMA_ENDPOINT=http://ollama-proxy:11434
      - OLLAMA_HOST=http://ollama-proxy:11434
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - INTERNAL_API_KEY=your-very-secret-internal-key
      - JWT_SECRET=your-secret-key

  check-code-service:
    build: ./services/check_code
    volumes:
      - ./services/check_code:/app
    ports:
      - "8004:8004"
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - OLLAMA_ENDPOINT=http://ollama-proxy:11434
      - OLLAMA_HOST=http://ollama-proxy:11434
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - HF_API_KEY=${HF_API_KEY}
      - INTERNAL_API_KEY=your-very-secret-internal-key
      - JWT_SECRET=your-secret-key

volumes:
  mongo-data:
  redis-data:

networks:
  app-network:
    driver: bridge
